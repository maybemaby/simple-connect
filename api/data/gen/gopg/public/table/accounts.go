//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Accounts = newAccountsTable("public", "accounts", "")

type accountsTable struct {
	postgres.Table

	// Columns
	ProviderID           postgres.ColumnString
	Provider             postgres.ColumnString
	UserID               postgres.ColumnString
	AccessToken          postgres.ColumnString
	RefreshToken         postgres.ColumnString
	AccessTokenExpiresAt postgres.ColumnTimestampz
	CreatedAt            postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountsTable struct {
	accountsTable

	EXCLUDED accountsTable
}

// AS creates new AccountsTable with assigned alias
func (a AccountsTable) AS(alias string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsTable with assigned schema name
func (a AccountsTable) FromSchema(schemaName string) *AccountsTable {
	return newAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsTable with assigned table prefix
func (a AccountsTable) WithPrefix(prefix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsTable with assigned table suffix
func (a AccountsTable) WithSuffix(suffix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsTable(schemaName, tableName, alias string) *AccountsTable {
	return &AccountsTable{
		accountsTable: newAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAccountsTableImpl("", "excluded", ""),
	}
}

func newAccountsTableImpl(schemaName, tableName, alias string) accountsTable {
	var (
		ProviderIDColumn           = postgres.StringColumn("provider_id")
		ProviderColumn             = postgres.StringColumn("provider")
		UserIDColumn               = postgres.StringColumn("user_id")
		AccessTokenColumn          = postgres.StringColumn("access_token")
		RefreshTokenColumn         = postgres.StringColumn("refresh_token")
		AccessTokenExpiresAtColumn = postgres.TimestampzColumn("access_token_expires_at")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		allColumns                 = postgres.ColumnList{ProviderIDColumn, ProviderColumn, UserIDColumn, AccessTokenColumn, RefreshTokenColumn, AccessTokenExpiresAtColumn, CreatedAtColumn}
		mutableColumns             = postgres.ColumnList{UserIDColumn, AccessTokenColumn, RefreshTokenColumn, AccessTokenExpiresAtColumn, CreatedAtColumn}
	)

	return accountsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ProviderID:           ProviderIDColumn,
		Provider:             ProviderColumn,
		UserID:               UserIDColumn,
		AccessToken:          AccessTokenColumn,
		RefreshToken:         RefreshTokenColumn,
		AccessTokenExpiresAt: AccessTokenExpiresAtColumn,
		CreatedAt:            CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
