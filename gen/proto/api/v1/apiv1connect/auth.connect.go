// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/api/v1/auth.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "simple-connect/gen/proto/api/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "proto.api.v1.AuthService"
	// ProtectedAuthServiceName is the fully-qualified name of the ProtectedAuthService service.
	ProtectedAuthServiceName = "proto.api.v1.ProtectedAuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProtectedAuthServiceMeProcedure is the fully-qualified name of the ProtectedAuthService's Me RPC.
	ProtectedAuthServiceMeProcedure = "/proto.api.v1.ProtectedAuthService/Me"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor           = v1.File_proto_api_v1_auth_proto.Services().ByName("AuthService")
	protectedAuthServiceServiceDescriptor  = v1.File_proto_api_v1_auth_proto.Services().ByName("ProtectedAuthService")
	protectedAuthServiceMeMethodDescriptor = protectedAuthServiceServiceDescriptor.Methods().ByName("Me")
)

// AuthServiceClient is a client for the proto.api.v1.AuthService service.
type AuthServiceClient interface {
}

// NewAuthServiceClient constructs a client for the proto.api.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	return &authServiceClient{}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
}

// AuthServiceHandler is an implementation of the proto.api.v1.AuthService service.
type AuthServiceHandler interface {
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/proto.api.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

// ProtectedAuthServiceClient is a client for the proto.api.v1.ProtectedAuthService service.
type ProtectedAuthServiceClient interface {
	Me(context.Context, *connect.Request[v1.MeRequest]) (*connect.Response[v1.ReadUser], error)
}

// NewProtectedAuthServiceClient constructs a client for the proto.api.v1.ProtectedAuthService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProtectedAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProtectedAuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &protectedAuthServiceClient{
		me: connect.NewClient[v1.MeRequest, v1.ReadUser](
			httpClient,
			baseURL+ProtectedAuthServiceMeProcedure,
			connect.WithSchema(protectedAuthServiceMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// protectedAuthServiceClient implements ProtectedAuthServiceClient.
type protectedAuthServiceClient struct {
	me *connect.Client[v1.MeRequest, v1.ReadUser]
}

// Me calls proto.api.v1.ProtectedAuthService.Me.
func (c *protectedAuthServiceClient) Me(ctx context.Context, req *connect.Request[v1.MeRequest]) (*connect.Response[v1.ReadUser], error) {
	return c.me.CallUnary(ctx, req)
}

// ProtectedAuthServiceHandler is an implementation of the proto.api.v1.ProtectedAuthService
// service.
type ProtectedAuthServiceHandler interface {
	Me(context.Context, *connect.Request[v1.MeRequest]) (*connect.Response[v1.ReadUser], error)
}

// NewProtectedAuthServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProtectedAuthServiceHandler(svc ProtectedAuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	protectedAuthServiceMeHandler := connect.NewUnaryHandler(
		ProtectedAuthServiceMeProcedure,
		svc.Me,
		connect.WithSchema(protectedAuthServiceMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.api.v1.ProtectedAuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProtectedAuthServiceMeProcedure:
			protectedAuthServiceMeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProtectedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProtectedAuthServiceHandler struct{}

func (UnimplementedProtectedAuthServiceHandler) Me(context.Context, *connect.Request[v1.MeRequest]) (*connect.Response[v1.ReadUser], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.api.v1.ProtectedAuthService.Me is not implemented"))
}
